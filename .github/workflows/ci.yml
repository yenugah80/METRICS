name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ==============================================================================
  # TESTING & QUALITY ASSURANCE
  # ==============================================================================
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run type checking
        run: npm run check

      - name: Run unit tests
        run: npm run test:unit
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/test_db
          JWT_ACCESS_SECRET: test-access-secret-for-ci-only-32-chars
          JWT_REFRESH_SECRET: test-refresh-secret-for-ci-only-32-chars

      - name: Run integration tests
        run: npm run test:integration
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/test_db
          JWT_ACCESS_SECRET: test-access-secret-for-ci-only-32-chars
          JWT_REFRESH_SECRET: test-refresh-secret-for-ci-only-32-chars

      - name: Run security tests
        run: npm run test:security

      - name: Generate test coverage
        run: npm run test:coverage
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/test_db
          JWT_ACCESS_SECRET: test-access-secret-for-ci-only-32-chars
          JWT_REFRESH_SECRET: test-refresh-secret-for-ci-only-32-chars

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # ==============================================================================
  # PERFORMANCE TESTING (k6)
  # ==============================================================================
  performance:
    name: Performance Smoke Tests
    runs-on: ubuntu-latest
    needs: [test]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Setup environment
        run: |
          cp .env.example .env
          echo "DATABASE_URL=postgresql://postgres:test_password@localhost:5432/test_db" >> .env
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
          echo "SESSION_SECRET=test-session-secret-32-chars-long" >> .env
          
      - name: Setup database
        run: npm run db:push --force
        
      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
          
      - name: Start application (background)
        run: |
          npm run dev &
          sleep 30
        env:
          NODE_ENV: test
          
      - name: Run k6 performance tests
        run: |
          k6 run k6/smoke.js --out json=k6-results.json
        env:
          API_BASE_URL: http://localhost:5000
          
      - name: Upload k6 results
        uses: actions/upload-artifact@v4
        with:
          name: k6-performance-report
          path: k6-results.json
          retention-days: 30

  # ==============================================================================
  # SECURITY SCANNING
  # ==============================================================================
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level moderate

      - name: Check for hardcoded secrets
        run: |
          echo "üîç Scanning for potential secrets in code..."
          ! grep -r --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" "sk-" client/ server/ || echo "‚ö†Ô∏è  Potential API keys found"
          ! grep -r --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" "pk_" client/ server/ || echo "‚ö†Ô∏è  Potential Stripe keys found"

  # ==============================================================================
  # BUILD & OPTIMIZE
  # ==============================================================================
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build client application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Run production readiness check
        run: npm run production:check
        env:
          NODE_ENV: production
          DATABASE_URL: postgresql://dummy:dummy@localhost:5432/dummy
          JWT_ACCESS_SECRET: production-test-secret-32-characters
          JWT_REFRESH_SECRET: production-test-secret-32-characters

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            dist/
            server-dist/
          retention-days: 7

  # ==============================================================================
  # DOCKER BUILD & PUSH
  # ==============================================================================
  docker:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # ==============================================================================
  # DEPLOYMENT (Production)
  # ==============================================================================
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Deploy to production
        run: |
          echo "üöÄ Deploying to production environment"
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          # Add your deployment commands here
          # Examples:
          # - kubectl apply -f k8s/
          # - helm upgrade --install myapp ./charts/myapp
          # - docker-compose up -d
          # - SSH deployment scripts
          
      - name: Run health checks
        run: |
          echo "üè• Running post-deployment health checks"
          # Add health check commands here
          # curl -f https://yourapp.com/health
          
      - name: Notify deployment success
        if: success()
        run: |
          echo "‚úÖ Deployment successful!"
          # Add notification logic here (Slack, email, etc.)
          
      - name: Notify deployment failure
        if: failure()
        run: |
          echo "‚ùå Deployment failed!"
          # Add failure notification logic here